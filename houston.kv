#:kivy 1.0.9

<Top>:
    size_hint: 1, .9
    pos_hint: {'center_x': .5, 'center_y': .45}
    do_default_tab: False

    # TPI1 and CMDQTAB  are added in python since apparently they can't be added here while maintaining hierarchy reference ability .... :/

<TPI1>: # the main UART tab
    id: tpi1
    text: 'UART'
    MainTab


<CMDQTab>: # the command queue tab
    id: tpi3
    text: 'Queue'
    # pass up the references for easy access in python
    rv: rv
    cmd_entry: cmd_entry
    cmd_expected_entry: cmd_expected_entry
    cmd_timeout_entry: cmd_timeout_entry
    BoxLayout:
        id: blx
        orientation:'vertical'
        
        GridLayout: # label container
            cols: 3
            rows: 1
            size_hint_y: None
            height: 50
            Label:
                text: 'Command'
            Label:
                text: 'Timeout'
            Label:
                text: 'Expected Response'
        GridLayout:
            cols: 3
            rows: 3
            size_hint_y: 0.4
            height: dp(108)
            padding: dp(8)
            spacing: dp(16)
            TextInput:
                id: cmd_entry
                size_hint_x: 1
                hint_text: 'Command'
                padding: dp(10), dp(5), 0, 0

            TextInput:
                id: cmd_timeout_entry
                size_hint_x: 1
                hint_text: 'Timeout'
                padding: dp(10), dp(5), 0, 0
            
            TextInput:
                id: cmd_expected_entry
                size_hint_x: 1
                hint_text: 'Expected Response'
                padding: dp(10), dp(5), 0, 0
            Button:
                text: 'Add to Schedule'
                on_press: root.add_to_sched()

            Button:
                text: 'Clear Schedule'
                on_press: root.remove()

        RecycleView:
            id: rv
            scroll_type: ['bars', 'content']
            scroll_wheel_distance: dp(114)
            bar_width: dp(10)
            viewclass: 'Cmdrow'
            RecycleGridLayout:
                default_size: None, dp(56)
                default_size_hint: 1, None
                size_hint_y: None
                height: self.minimum_height
                orientation: 'vertical'
                spacing: dp(2)
                cols: 1

<SelectableLabel>:
    # Draw a background to indicate selection
    canvas.before:
        Color:
            rgba: (.0, 0.9, .1, .3) if self.selected else (0, 0, 0, 1)
        Rectangle:
            pos: self.pos
            size: self.size


<MainTab>:
    id: mt1
    label_wid: my_custom_label # the label_wid handle can be used to access the label from higher up
    txt_entry: txt_entry
   # rv_handle: my_rv #CDS 2 - assign the id to a handle at the top class level
    rv: rv

    BoxLayout: # panels must have only one direct child
        id: bl1
        size_hint_y: 1
        size_hint_x: 1
        orientation: 'vertical'

        BoxLayout: # layout for main area
            id: main_area
            size_hint_y: 0.9
            size_hint_x: 1
            orientation: 'vertical'

            #RV:
             #   id: my_rv #CDS 1 - give the object an ID

            BoxLayout: # top bar
                size_hint_x: 1
                size_hint_y: 0.05
                Label:
                    id: lab_2
                    text: 'Some Status Thing'
                Label:
                    id: my_custom_label
                    text: 'Other Status Thing'

            BoxLayout: # main data list
                size_hint_x: 1
                size_hint_y: 0.9
                RecycleView:
                    id: rv
                    scroll_type: ['bars', 'content']
                    scroll_wheel_distance: dp(114)
                    bar_width: dp(10)
                    viewclass: 'UARTRow'
                    RecycleBoxLayout:
                        default_size: None, dp(30) # dp(30) is height
                        default_size_hint: 1, None
                        size_hint_y: None
                        height: self.minimum_height
                        orientation: 'vertical'
                        spacing: dp(2)


        BoxLayout: # layout for command entry
            size_hint_y: 0.1
            size_hint_x: 1
            TextInput:
                id: txt_entry
                text: ""
                size_hint_x: .8
                spacing: .2, .2
                multiline: False
                on_text_validate: root.on_enter(*args) # can either call root. or app. - in this case, root is MainTab class

            Button:
                text: 'Send'
                size_hint_y: 1
                size_hint_x: 0.2
                on_press: root.send_button_press()


<UARTRow@BoxLayout>: # row class for the UART telemetry
    canvas.before:
        Color:
            rgba: 0.14, 0.14, 0.14, 1
        Rectangle:
            size: self.size
            pos: self.pos
    value: ''
    Label:
        text: root.value
        padding: 10, 50
        text_size: root.width, None
        size: self.texture_size
        halign: 'left'
        valign: 'middle'
        color: 0.92, 0.9, 0.66, 1

<Cmdrow@BoxLayout>: # the row class for the command system - pulls out several different items and displays nicely
    canvas.before:
        Color:
            rgba: 0.14, 0.14, 0.14, 1
        Rectangle:
            size: self.size
            pos: self.pos
    cmd: ''
    timeout: ''
    expect: ''
    BoxLayout:
        size_hint_x: 1
        orientation: 'horizontal'
        Label:
            size_hint_x: 0.333
            text: root.cmd
            color: 0.0, 0.9, 0.66, 1
        Label:
            size_hint_x: 0.333
            text: root.timeout
            color: 0.0, 0.9, 0.66, 1
        Label:
            size_hint_x: 0.333
            text: root.expect
            color: 0.0, 0.9, 0.66, 1
       



